



Internet                                                 L.R. van Kammen
Internet-Draft                                              20 June 2025
Intended status: Informational                                          
Expires: 22 December 2025


                         soundfont sidecarfiles
             draft-soundfont-sidecarfiles-leonvankammen-00

Abstract

   A simple, implicit method for media players, DAWs and midisequencers,
   to automatically load soundfont files when playing MIDI files,
   enhancing the playback experience without requiring user
   configuration.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 22 December 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.





van Kammen              Expires 22 December 2025                [Page 1]

Internet-Draft           soundfont sidecarfiles                June 2025


Table of Contents

   1.  MIDI Soundfont Sidecar specification  . . . . . . . . . . . .   2
   2.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   4
   3.  Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .   4

1.  MIDI Soundfont Sidecar specification

   *  *Level:* 0
   *  *Version:* 0.5

   1.  *Sidecar File Detection:*

   *  *Primary:* Media players SHOULD first look for a soundfont sidecar
      file (=with the exact same name) as the MIDI file (excluding the
      file extension).
   *  *Fallback:* If a soundfont file is not detected, media players
      SHOULD then look for other soundfont sidecar files with the same
      naming convention

   |  Fallback order: .SF2 > .SF3 > .SFZ > .DLS
   |  
   |  NOTE: a mediaplayer-engine does not have to support all soundfont-
   |  fileformats to be spec-compliant.  Supporting the lowest common
   |  denominator (.SF2 in 2025) is enough.

   3.  *Example*

   Here's a fictional music-album, based on midi- and soundfont-files:

   $ cd album
   $ ls

   drwxr-xr-x   2 leon users  4096 Jun 20 21:39 .
   drwxrwxrwt 295 root root  94208 Jun 20 21:39 ..
   -rw-r--r--   1 leon users   200 Jun 20 21:38 song1.mid
   -rw-r--r--   1 leon user  10000 Jun 20 21:38 song1.sf2
   -rw-r--r--   1 leon users   200 Jun 20 21:38 song2.mid
   lrwxrwxrwx   1 leon users     9 Jun 20 21:39 song2.sf2 -> song1.sf2

   $ mediaplayer song1.mid

   |  the mediaplayer will scan for the soundfont in the same directory
   |  (song1.sf2 e.g.), and use that instead of the global configured
   |  soundfont.

   2.  *File Naming Convention:*




van Kammen              Expires 22 December 2025                [Page 2]

Internet-Draft           soundfont sidecarfiles                June 2025


   *  The sidecar file MUST have the same name as the MIDI file,
      differing only by the file extension (.DLS or .SF2 e.g.).
   *  *Example:*
      -  mysong.mid â†’ mysong.SF2 (primary) or mysong.SFZ (fallback e.g.)

   |  Soundfont file-extensions are *case-insensitive* (valid: .sf2 or
   |  .SF2 or .Sf2 e.g.)

   3.  *Playback Behavior:*

   *  Upon finding a matching sidecar file, the media player SHOULD load
      the soundfont from this file for the duration of the MIDI file
      playback.
   *  If no sidecar file is found, the media player SHOULD fall back to
      its default soundfont or configured soundfont settings.
   *  symlinked (or windows junctioned) soundfonts should be allowed (to
      preserve space)

   4.  *Implementation Notes:*

   *  This spec is designed to be lightweight and easy to implement,
      encouraging broad adoption across various media players and
      platforms.
   *  Implementors are encouraged to provide an option for users to
      override this behavior if desired (e.g., always using a default
      soundfont, disabling sidecar loading).

   5.  *Relation to RMIDI and Other Formats:*

   *  This specification might serve as an 'override' feature for RMIDI
      (https://github.com/spessasus/sf2-rmidi-specification) files,
      allowing users to play RMID (https://github.com/spessasus/sf2-
      rmidi-specification) content with a custom soundfont without re-
      encoding.
   *  It is format-agnostic, meaning it can be applied to various MIDI
      file formats beyond RMID (https://github.com/spessasus/sf2-rmidi-
      specification).

   *Adoption and Feedback:*

   *  Implementors and interested parties are invited to provide
      feedback and suggestions for future revisions.
   *  A list of adopting media players and software will be maintained
      to track the spec's ecosystem impact.

   *Revision History:*

   *  *v0.5:* Initial release.



van Kammen              Expires 22 December 2025                [Page 3]

Internet-Draft           soundfont sidecarfiles                June 2025


   *Next Steps:*

   1.  *Review and Feedback:* Circulate this draft among the mentioned
       projects (VLC-player, fluidsynth, etc.) and relevant communities
       for feedback.
   2.  *Revision (if necessary):* Based on the feedback received, revise
       the spec to better meet the needs of implementors and users.
   3.  *Publication and Promotion:* Publish the finalized spec on a
       dedicated webpage or within relevant developer resources, and
       promote it across music tech, developer, and open-source
       communities.

   *  leonvankammen|isvery.ninja

2.  IANA Considerations

   This document has no IANA actions.

3.  Acknowledgments

   TODO acknowledge.






























van Kammen              Expires 22 December 2025                [Page 4]
